{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.2", "generated_at": "2025-03-11T12:05:01.810125Z", "invocation_id": "fcfa8915-7e49-4bd9-b91e-7e265bc0fda2", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.672776Z", "completed_at": "2025-03-11T12:05:01.682552Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.682807Z", "completed_at": "2025-03-11T12:05:01.682816Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016275882720947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.stg_prohandel__inventory", "compiled": true, "compiled_code": "with source as (\n    select * from \"MERCURIOS_DATA\".\"RAW\".\"inventory\"\n),\n\nrenamed as (\n    select\n        inventory_id,\n        article_id,\n        warehouse_id,\n        quantity,\n        \n        -- Add stock level categorization\n        case\n            when quantity <= 0 then 'Out of Stock'\n            when quantity <= 5 then 'Low Stock'\n            when quantity <= 20 then 'Medium Stock'\n            when quantity > 20 then 'High Stock'\n            else 'Unknown'\n        end as stock_level,\n        \n        -- Add reorder flag\n        case\n            when quantity <= 5 then true\n            else false\n        end as needs_reorder,\n        \n        location,\n        last_count_date,\n        is_available,\n        tenant_id,\n        \n        -- Fivetran metadata\n        _fivetran_synced,\n        \n        -- Add data quality flags\n        case when quantity < 0 then true else false end as is_negative_quantity\n    from source\n)\n\nselect * from renamed", "relation_name": "\"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__inventory\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.667998Z", "completed_at": "2025-03-11T12:05:01.683400Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.684580Z", "completed_at": "2025-03-11T12:05:01.684584Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018288135528564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.stg_prohandel__articles", "compiled": true, "compiled_code": "with source as (\n    select * from \"MERCURIOS_DATA\".\"RAW\".\"article\"\n),\n\nrenamed as (\n    select\n        article_id,\n        article_number,\n        description,\n        category,\n        subcategory,\n        brand,\n        supplier,\n        purchase_price,\n        retail_price,\n        min_stock_level,\n        max_stock_level,\n        reorder_point,\n        lead_time_days,\n        is_active,\n        \n        -- Calculate profit margin\n        (retail_price - purchase_price) as profit_margin,\n        case \n            when (purchase_price > 0) then ((retail_price - purchase_price) / purchase_price) * 100 \n            else null \n        end as profit_margin_percent,\n        \n        -- Add price tier categorization\n        case\n            when retail_price < 10 then 'Budget'\n            when retail_price >= 10 and retail_price < 50 then 'Standard'\n            when retail_price >= 50 and retail_price < 100 then 'Premium'\n            when retail_price >= 100 then 'Luxury'\n            else 'Uncategorized'\n        end as price_tier,\n        \n        created_at,\n        updated_at,\n        tenant_id,\n        \n        -- Fivetran metadata\n        _fivetran_synced,\n        \n        -- Add data quality flags\n        case when description is null or description = '' then true else false end as is_missing_description,\n        case when purchase_price is null or purchase_price = 0 then true else false end as is_missing_purchase_price,\n        case when retail_price is null or retail_price = 0 then true else false end as is_missing_retail_price\n    from source\n)\n\nselect * from renamed", "relation_name": "\"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__articles\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.674463Z", "completed_at": "2025-03-11T12:05:01.684110Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.685210Z", "completed_at": "2025-03-11T12:05:01.685213Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018447160720825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.stg_prohandel__sales", "compiled": true, "compiled_code": "with source as (\n    select * from \"MERCURIOS_DATA\".\"RAW\".\"sale\"\n),\n\nrenamed as (\n    select\n        sale_id,\n        order_id,\n        article_id,\n        quantity,\n        price,\n        discount,\n        \n        -- Calculate net price and revenue\n        (price - coalesce(discount, 0)) as net_price,\n        (price - coalesce(discount, 0)) * quantity as revenue,\n        \n        -- Add sale type categorization\n        case\n            when discount is null or discount = 0 then 'Regular'\n            when discount > 0 and discount < (price * 0.1) then 'Small Discount'\n            when discount >= (price * 0.1) and discount < (price * 0.3) then 'Medium Discount'\n            when discount >= (price * 0.3) then 'Large Discount'\n            else 'Unknown'\n        end as sale_type,\n        \n        sale_date,\n        shop_id,\n        tenant_id,\n        \n        -- Fivetran metadata\n        _fivetran_synced,\n        \n        -- Add data quality flags\n        case when quantity <= 0 then true else false end as is_invalid_quantity,\n        case when price <= 0 then true else false end as is_invalid_price,\n        case when discount > price then true else false end as is_discount_greater_than_price\n    from source\n)\n\nselect * from renamed", "relation_name": "\"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__sales\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.675876Z", "completed_at": "2025-03-11T12:05:01.684365Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.685527Z", "completed_at": "2025-03-11T12:05:01.685531Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01857590675354004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_article_article_id.a3a021f44e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect article_id\nfrom \"MERCURIOS_DATA\".\"RAW\".\"article\"\nwhere article_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.686142Z", "completed_at": "2025-03-11T12:05:01.690235Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.728646Z", "completed_at": "2025-03-11T12:05:01.728654Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04489612579345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_article_article_number.bc7d7b092e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect article_number\nfrom \"MERCURIOS_DATA\".\"RAW\".\"article\"\nwhere article_number is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.690977Z", "completed_at": "2025-03-11T12:05:01.734088Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.735013Z", "completed_at": "2025-03-11T12:05:01.735021Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04595494270324707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_inventory_article_id.b5efc266f9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect article_id\nfrom \"MERCURIOS_DATA\".\"RAW\".\"inventory\"\nwhere article_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.729118Z", "completed_at": "2025-03-11T12:05:01.734451Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.735445Z", "completed_at": "2025-03-11T12:05:01.735452Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04608488082885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_inventory_inventory_id.8764c20f3f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect inventory_id\nfrom \"MERCURIOS_DATA\".\"RAW\".\"inventory\"\nwhere inventory_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.731558Z", "completed_at": "2025-03-11T12:05:01.735931Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.737077Z", "completed_at": "2025-03-11T12:05:01.737082Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04741334915161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_inventory_quantity.ddfd3d3568", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom \"MERCURIOS_DATA\".\"RAW\".\"inventory\"\nwhere quantity is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.737536Z", "completed_at": "2025-03-11T12:05:01.741439Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.746802Z", "completed_at": "2025-03-11T12:05:01.746808Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012238025665283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_inventory_warehouse_id.6307156ecb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect warehouse_id\nfrom \"MERCURIOS_DATA\".\"RAW\".\"inventory\"\nwhere warehouse_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.741621Z", "completed_at": "2025-03-11T12:05:01.749832Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.750518Z", "completed_at": "2025-03-11T12:05:01.750521Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010662317276000977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_sale_article_id.ed4013e08f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect article_id\nfrom \"MERCURIOS_DATA\".\"RAW\".\"sale\"\nwhere article_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.744174Z", "completed_at": "2025-03-11T12:05:01.750026Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.750879Z", "completed_at": "2025-03-11T12:05:01.750881Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010683298110961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_sale_order_id.5242416524", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"MERCURIOS_DATA\".\"RAW\".\"sale\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.747285Z", "completed_at": "2025-03-11T12:05:01.751163Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.751995Z", "completed_at": "2025-03-11T12:05:01.751998Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010811090469360352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_sale_price.3f2611cfb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom \"MERCURIOS_DATA\".\"RAW\".\"sale\"\nwhere price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.752351Z", "completed_at": "2025-03-11T12:05:01.755882Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.760847Z", "completed_at": "2025-03-11T12:05:01.760851Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010653972625732422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_sale_quantity.e6b3fcca5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom \"MERCURIOS_DATA\".\"RAW\".\"sale\"\nwhere quantity is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.758447Z", "completed_at": "2025-03-11T12:05:01.767466Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.768282Z", "completed_at": "2025-03-11T12:05:01.768287Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01357126235961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_sale_sale_id.d7df7f53a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sale_id\nfrom \"MERCURIOS_DATA\".\"RAW\".\"sale\"\nwhere sale_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.756068Z", "completed_at": "2025-03-11T12:05:01.767690Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.768831Z", "completed_at": "2025-03-11T12:05:01.768835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014368057250976562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_not_null_prohandel_sale_sale_date.fe13d0a52e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sale_date\nfrom \"MERCURIOS_DATA\".\"RAW\".\"sale\"\nwhere sale_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.761281Z", "completed_at": "2025-03-11T12:05:01.768583Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.769609Z", "completed_at": "2025-03-11T12:05:01.769612Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013989925384521484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_relationships_prohandel_inventory_article_id__article_id__source_prohandel_article_.e4c4fdb4dc", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select article_id as from_field\n    from \"MERCURIOS_DATA\".\"RAW\".\"inventory\"\n    where article_id is not null\n),\n\nparent as (\n    select article_id as to_field\n    from \"MERCURIOS_DATA\".\"RAW\".\"article\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.770187Z", "completed_at": "2025-03-11T12:05:01.774595Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.780721Z", "completed_at": "2025-03-11T12:05:01.780728Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012840986251831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_relationships_prohandel_sale_article_id__article_id__source_prohandel_article_.88a3868b27", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select article_id as from_field\n    from \"MERCURIOS_DATA\".\"RAW\".\"sale\"\n    where article_id is not null\n),\n\nparent as (\n    select article_id as to_field\n    from \"MERCURIOS_DATA\".\"RAW\".\"article\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.774784Z", "completed_at": "2025-03-11T12:05:01.783919Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.784619Z", "completed_at": "2025-03-11T12:05:01.784623Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011539936065673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_unique_prohandel_article_article_id.c50d1ebb23", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    article_id as unique_field,\n    count(*) as n_records\n\nfrom \"MERCURIOS_DATA\".\"RAW\".\"article\"\nwhere article_id is not null\ngroup by article_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.778349Z", "completed_at": "2025-03-11T12:05:01.784173Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.785143Z", "completed_at": "2025-03-11T12:05:01.785145Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011576175689697266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_unique_prohandel_inventory_inventory_id.fbb9d1ce4d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    inventory_id as unique_field,\n    count(*) as n_records\n\nfrom \"MERCURIOS_DATA\".\"RAW\".\"inventory\"\nwhere inventory_id is not null\ngroup by inventory_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.781261Z", "completed_at": "2025-03-11T12:05:01.784960Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.785796Z", "completed_at": "2025-03-11T12:05:01.785799Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011677026748657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.mercurios.source_unique_prohandel_sale_sale_id.07716b2762", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sale_id as unique_field,\n    count(*) as n_records\n\nfrom \"MERCURIOS_DATA\".\"RAW\".\"sale\"\nwhere sale_id is not null\ngroup by sale_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.786136Z", "completed_at": "2025-03-11T12:05:01.791728Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.791976Z", "completed_at": "2025-03-11T12:05:01.791981Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007696866989135742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.demand_forecast", "compiled": true, "compiled_code": "\n\nwith sales_history as (\n    select\n        s.article_id,\n        a.article_number,\n        a.description,\n        a.category,\n        a.subcategory,\n        a.brand,\n        a.supplier,\n        a.price_tier,\n        s.sale_date,\n        sum(s.quantity) as quantity_sold,\n        count(distinct s.sale_id) as number_of_sales,\n        sum(s.revenue) as revenue\n    from \"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__sales\" s\n    join \"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__articles\" a on s.article_id = a.article_id\n    where s.sale_date >= dateadd('day', -365, current_date())\n    group by \n        s.article_id,\n        a.article_number,\n        a.description,\n        a.category,\n        a.subcategory,\n        a.brand,\n        a.supplier,\n        a.price_tier,\n        s.sale_date\n),\n\n-- Calculate daily, weekly, and monthly aggregates\ndaily_sales as (\n    select\n        article_id,\n        article_number,\n        description,\n        category,\n        subcategory,\n        brand,\n        supplier,\n        price_tier,\n        sale_date,\n        quantity_sold,\n        number_of_sales,\n        revenue,\n        -- Extract date parts for seasonality analysis\n        dayofweek(sale_date) as day_of_week,\n        dayofmonth(sale_date) as day_of_month,\n        month(sale_date) as month,\n        quarter(sale_date) as quarter\n    from sales_history\n),\n\nweekly_sales as (\n    select\n        article_id,\n        article_number,\n        description,\n        category,\n        subcategory,\n        brand,\n        supplier,\n        price_tier,\n        date_trunc('week', sale_date) as week_start_date,\n        sum(quantity_sold) as weekly_quantity_sold,\n        sum(number_of_sales) as weekly_number_of_sales,\n        sum(revenue) as weekly_revenue,\n        avg(quantity_sold) as avg_daily_quantity_sold,\n        week(sale_date) as week_of_year\n    from daily_sales\n    group by \n        article_id,\n        article_number,\n        description,\n        category,\n        subcategory,\n        brand,\n        supplier,\n        price_tier,\n        week_start_date,\n        week_of_year\n),\n\nmonthly_sales as (\n    select\n        article_id,\n        article_number,\n        description,\n        category,\n        subcategory,\n        brand,\n        supplier,\n        price_tier,\n        date_trunc('month', sale_date) as month_start_date,\n        sum(quantity_sold) as monthly_quantity_sold,\n        sum(number_of_sales) as monthly_number_of_sales,\n        sum(revenue) as monthly_revenue,\n        avg(quantity_sold) as avg_daily_quantity_sold,\n        month(sale_date) as month_of_year\n    from daily_sales\n    group by \n        article_id,\n        article_number,\n        description,\n        category,\n        subcategory,\n        brand,\n        supplier,\n        price_tier,\n        month_start_date,\n        month_of_year\n),\n\n-- Calculate moving averages and trends\nmoving_averages as (\n    select\n        article_id,\n        sale_date,\n        quantity_sold,\n        \n        -- Calculate 7-day moving average\n        avg(quantity_sold) over (\n            partition by article_id \n            order by sale_date \n            rows between 6 preceding and current row\n        ) as ma_7_day,\n        \n        -- Calculate 30-day moving average\n        avg(quantity_sold) over (\n            partition by article_id \n            order by sale_date \n            rows between 29 preceding and current row\n        ) as ma_30_day,\n        \n        -- Calculate 90-day moving average\n        avg(quantity_sold) over (\n            partition by article_id \n            order by sale_date \n            rows between 89 preceding and current row\n        ) as ma_90_day\n    from daily_sales\n),\n\n-- Calculate seasonality factors\nseasonality as (\n    select\n        article_id,\n        day_of_week,\n        avg(quantity_sold) as avg_qty_by_day_of_week,\n        \n        -- Calculate day of week seasonality factor\n        avg(quantity_sold) / nullif(\n            avg(avg(quantity_sold)) over (partition by article_id),\n            0\n        ) as day_of_week_factor\n    from daily_sales\n    group by article_id, day_of_week\n),\n\nmonthly_seasonality as (\n    select\n        article_id,\n        month_of_year,\n        avg(monthly_quantity_sold) as avg_qty_by_month,\n        \n        -- Calculate month seasonality factor\n        avg(monthly_quantity_sold) / nullif(\n            avg(avg(monthly_quantity_sold)) over (partition by article_id),\n            0\n        ) as month_factor\n    from monthly_sales\n    group by article_id, month_of_year\n),\n\n-- Calculate recent sales statistics for forecasting\nrecent_stats as (\n    select\n        article_id,\n        \n        -- Last 30 days\n        sum(case when sale_date >= dateadd('day', -30, current_date()) then quantity_sold else 0 end) as qty_last_30d,\n        avg(case when sale_date >= dateadd('day', -30, current_date()) then quantity_sold else null end) as avg_daily_qty_last_30d,\n        \n        -- Last 90 days\n        sum(case when sale_date >= dateadd('day', -90, current_date()) then quantity_sold else 0 end) as qty_last_90d,\n        avg(case when sale_date >= dateadd('day', -90, current_date()) then quantity_sold else null end) as avg_daily_qty_last_90d,\n        \n        -- Last 365 days\n        sum(quantity_sold) as qty_last_365d,\n        avg(quantity_sold) as avg_daily_qty_last_365d,\n        \n        -- Calculate trend (comparing last 30 days to previous 30 days)\n        sum(case when sale_date >= dateadd('day', -30, current_date()) then quantity_sold else 0 end) /\n        nullif(sum(case when sale_date >= dateadd('day', -60, current_date()) and \n                        sale_date < dateadd('day', -30, current_date()) then quantity_sold else 0 end), 0) - 1 as trend_factor\n    from daily_sales\n    group by article_id\n),\n\n-- Generate forecast dates (simplified without dbt_utils for now)\nforecast_dates as (\n    select dateadd('day', seq4(), current_date()) as date_day\n    from table(generator(rowcount => 90))\n),\n\n-- Create the final forecast\ndemand_forecast as (\n    select\n        a.article_id,\n        a.article_number,\n        a.description,\n        a.category,\n        a.subcategory,\n        a.brand,\n        a.supplier,\n        a.price_tier,\n        d.date_day as forecast_date,\n        \n        -- Extract date parts for applying seasonality\n        dayofweek(d.date_day) as day_of_week,\n        month(d.date_day) as month_of_year,\n        \n        -- Base forecast using recent average\n        rs.avg_daily_qty_last_90d as base_forecast,\n        \n        -- Apply trend factor (capped to prevent extreme values)\n        case\n            when rs.trend_factor > 0.5 then 1.5\n            when rs.trend_factor < -0.5 then 0.5\n            else 1 + coalesce(rs.trend_factor, 0)\n        end as applied_trend_factor,\n        \n        -- Apply day of week seasonality\n        coalesce(s.day_of_week_factor, 1) as day_of_week_factor,\n        \n        -- Apply monthly seasonality\n        coalesce(ms.month_factor, 1) as month_factor,\n        \n        -- Calculate final forecast\n        round(\n            rs.avg_daily_qty_last_90d * \n            case\n                when rs.trend_factor > 0.5 then 1.5\n                when rs.trend_factor < -0.5 then 0.5\n                else 1 + coalesce(rs.trend_factor, 0)\n            end *\n            coalesce(s.day_of_week_factor, 1) *\n            coalesce(ms.month_factor, 1),\n            2\n        ) as forecasted_daily_demand,\n        \n        -- Add cumulative forecast\n        sum(\n            round(\n                rs.avg_daily_qty_last_90d * \n                case\n                    when rs.trend_factor > 0.5 then 1.5\n                    when rs.trend_factor < -0.5 then 0.5\n                    else 1 + coalesce(rs.trend_factor, 0)\n                end *\n                coalesce(s.day_of_week_factor, 1) *\n                coalesce(ms.month_factor, 1),\n                2\n            )\n        ) over (\n            partition by a.article_id \n            order by d.date_day \n            rows between unbounded preceding and current row\n        ) as cumulative_forecasted_demand,\n        \n        -- Historical sales statistics\n        rs.avg_daily_qty_last_30d,\n        rs.avg_daily_qty_last_90d,\n        rs.avg_daily_qty_last_365d,\n        rs.qty_last_30d,\n        rs.qty_last_90d,\n        rs.qty_last_365d,\n        \n        -- Add confidence level based on data quality\n        case\n            when rs.qty_last_365d > 100 and rs.avg_daily_qty_last_30d > 0 then 'High'\n            when rs.qty_last_90d > 30 and rs.avg_daily_qty_last_30d > 0 then 'Medium'\n            when rs.qty_last_30d > 0 then 'Low'\n            else 'Very Low'\n        end as forecast_confidence,\n        \n        -- Generate forecast timestamp\n        current_timestamp() as generated_at,\n        \n        -- Add tenant_id\n        a.tenant_id\n        \n    from \"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__articles\" a\n    cross join forecast_dates d\n    left join recent_stats rs on a.article_id = rs.article_id\n    left join seasonality s on a.article_id = s.article_id and dayofweek(d.date_day) = s.day_of_week\n    left join monthly_seasonality ms on a.article_id = ms.article_id and month(d.date_day) = ms.month_of_year\n    where rs.avg_daily_qty_last_90d > 0  -- Only forecast for items with recent sales\n)\n\nselect * from demand_forecast", "relation_name": "\"dbt_mercurios_dev\".\"main_marts_inventory\".\"demand_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.789339Z", "completed_at": "2025-03-11T12:05:01.792301Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.792551Z", "completed_at": "2025-03-11T12:05:01.792554Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0037691593170166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.int_inventory_with_metrics", "compiled": true, "compiled_code": "with inventory as (\n    select * from \"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__inventory\"\n),\n\narticles as (\n    select * from \"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__articles\"\n),\n\nsales_last_30_days as (\n    select\n        article_id,\n        sum(quantity) as quantity_sold_30d,\n        count(distinct sale_id) as num_orders_30d\n    from \"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__sales\"\n    where sale_date >= dateadd('day', -30, current_date())\n    group by article_id\n),\n\nsales_last_90_days as (\n    select\n        article_id,\n        sum(quantity) as quantity_sold_90d,\n        count(distinct sale_id) as num_orders_90d\n    from \"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__sales\"\n    where sale_date >= dateadd('day', -90, current_date())\n    group by article_id\n),\n\ninventory_with_metrics as (\n    select\n        -- Inventory fields\n        i.inventory_id,\n        i.article_id,\n        i.warehouse_id,\n        i.quantity,\n        i.stock_level,\n        i.needs_reorder,\n        i.location,\n        i.last_count_date,\n        i.is_available,\n        i.tenant_id,\n        \n        -- Article fields\n        a.article_number,\n        a.description,\n        a.category,\n        a.subcategory,\n        a.brand,\n        a.supplier,\n        a.purchase_price,\n        a.retail_price,\n        a.min_stock_level,\n        a.max_stock_level,\n        a.reorder_point,\n        a.lead_time_days,\n        a.profit_margin,\n        a.profit_margin_percent,\n        a.price_tier,\n        \n        -- Sales metrics\n        coalesce(s30.quantity_sold_30d, 0) as quantity_sold_30d,\n        coalesce(s30.num_orders_30d, 0) as num_orders_30d,\n        coalesce(s90.quantity_sold_90d, 0) as quantity_sold_90d,\n        coalesce(s90.num_orders_90d, 0) as num_orders_90d,\n        \n        -- Calculate days of supply\n        case\n            when coalesce(s30.quantity_sold_30d, 0) > 0 then \n                (i.quantity / (s30.quantity_sold_30d / 30.0))\n            else null\n        end as days_of_supply_30d,\n        \n        case\n            when coalesce(s90.quantity_sold_90d, 0) > 0 then \n                (i.quantity / (s90.quantity_sold_90d / 90.0))\n            else null\n        end as days_of_supply_90d,\n        \n        -- Calculate stock turnover rate (annualized)\n        case\n            when i.quantity > 0 and coalesce(s30.quantity_sold_30d, 0) > 0 then \n                (s30.quantity_sold_30d * (365.0 / 30.0)) / i.quantity\n            else null\n        end as turnover_rate_30d,\n        \n        case\n            when i.quantity > 0 and coalesce(s90.quantity_sold_90d, 0) > 0 then \n                (s90.quantity_sold_90d * (365.0 / 90.0)) / i.quantity\n            else null\n        end as turnover_rate_90d,\n        \n        -- Calculate inventory value\n        i.quantity * a.purchase_price as inventory_value,\n        i.quantity * a.retail_price as potential_revenue,\n        \n        -- Calculate excess inventory flag\n        case\n            when coalesce(s90.quantity_sold_90d, 0) = 0 and i.quantity > 10 then true\n            when coalesce(s90.quantity_sold_90d, 0) > 0 and \n                 (i.quantity / (s90.quantity_sold_90d / 90.0)) > 180 then true\n            else false\n        end as is_excess_inventory,\n        \n        -- Calculate slow-moving inventory flag\n        case\n            when coalesce(s90.quantity_sold_90d, 0) = 0 and i.quantity > 0 then true\n            when coalesce(s90.quantity_sold_90d, 0) > 0 and \n                 (s90.quantity_sold_90d * (365.0 / 90.0)) / i.quantity < 1 then true\n            else false\n        end as is_slow_moving,\n        \n        -- Calculate stockout risk flag\n        case\n            when i.quantity = 0 then 'Stockout'\n            when coalesce(s30.quantity_sold_30d, 0) > 0 and \n                 (i.quantity / (s30.quantity_sold_30d / 30.0)) < 7 then 'Critical'\n            when coalesce(s30.quantity_sold_30d, 0) > 0 and \n                 (i.quantity / (s30.quantity_sold_30d / 30.0)) < 14 then 'Warning'\n            else 'Normal'\n        end as stockout_risk,\n        \n        -- Fivetran metadata\n        i._fivetran_synced\n    from inventory i\n    left join articles a on i.article_id = a.article_id\n    left join sales_last_30_days s30 on i.article_id = s30.article_id\n    left join sales_last_90_days s90 on i.article_id = s90.article_id\n)\n\nselect * from inventory_with_metrics", "relation_name": "\"dbt_mercurios_dev\".\"main_intermediate\".\"int_inventory_with_metrics\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.793810Z", "completed_at": "2025-03-11T12:05:01.796000Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.796185Z", "completed_at": "2025-03-11T12:05:01.796188Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0029380321502685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.inventory_status", "compiled": true, "compiled_code": "\n\nwith inventory_metrics as (\n    select * from \"dbt_mercurios_dev\".\"main_intermediate\".\"int_inventory_with_metrics\"\n),\n\ninventory_status as (\n    select\n        -- Primary keys and identifiers\n        inventory_id,\n        article_id,\n        warehouse_id,\n        article_number,\n        \n        -- Article details\n        description,\n        category,\n        subcategory,\n        brand,\n        supplier,\n        price_tier,\n        \n        -- Inventory metrics\n        quantity,\n        stock_level,\n        needs_reorder,\n        days_of_supply_30d,\n        days_of_supply_90d,\n        turnover_rate_30d,\n        turnover_rate_90d,\n        stockout_risk,\n        \n        -- Sales metrics\n        quantity_sold_30d,\n        quantity_sold_90d,\n        num_orders_30d,\n        num_orders_90d,\n        \n        -- Financial metrics\n        purchase_price,\n        retail_price,\n        profit_margin,\n        profit_margin_percent,\n        inventory_value,\n        potential_revenue,\n        \n        -- Flags\n        is_excess_inventory,\n        is_slow_moving,\n        \n        -- Calculated fields\n        case\n            when stockout_risk = 'Stockout' then 1\n            when stockout_risk = 'Critical' then 2\n            when stockout_risk = 'Warning' then 3\n            else 4\n        end as stockout_risk_priority,\n        \n        case\n            when is_excess_inventory then inventory_value else 0\n        end as excess_inventory_value,\n        \n        case\n            when is_slow_moving then inventory_value else 0\n        end as slow_moving_value,\n        \n        -- Reorder quantity recommendation\n        case\n            -- If no sales, recommend minimum stock\n            when quantity_sold_90d = 0 then \n                greatest(5 - quantity, 0)\n            -- If sales exist, calculate based on days of supply target\n            when days_of_supply_90d is not null then\n                greatest(\n                    ceil((quantity_sold_90d / 90.0) * 30) - quantity, -- 30 days supply\n                    0\n                )\n            else 0\n        end as recommended_reorder_quantity,\n        \n        -- ABC Analysis (based on sales volume and value)\n        case\n            when quantity_sold_90d > 0 and \n                 quantity_sold_90d * retail_price >= \n                 percentile_cont(0.8) within group (order by nullif(quantity_sold_90d * retail_price, 0)) \n                 over (partition by warehouse_id) then 'A'\n            when quantity_sold_90d > 0 and \n                 quantity_sold_90d * retail_price >= \n                 percentile_cont(0.5) within group (order by nullif(quantity_sold_90d * retail_price, 0)) \n                 over (partition by warehouse_id) then 'B'\n            when quantity_sold_90d > 0 then 'C'\n            else 'D' -- No sales\n        end as abc_class,\n        \n        -- Last update timestamp\n        _fivetran_synced as last_updated,\n        \n        -- Add tenant_id\n        tenant_id\n    from inventory_metrics\n)\n\nselect * from inventory_status", "relation_name": "\"dbt_mercurios_dev\".\"main_marts_inventory\".\"inventory_status\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.800196Z", "completed_at": "2025-03-11T12:05:01.802612Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.802826Z", "completed_at": "2025-03-11T12:05:01.802834Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005639791488647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.stock_levels", "compiled": true, "compiled_code": "\n\nwith inventory_status as (\n    select * from \"dbt_mercurios_dev\".\"main_marts_inventory\".\"inventory_status\"\n),\n\n-- Aggregate metrics by warehouse\nwarehouse_metrics as (\n    select\n        warehouse_id,\n        count(distinct article_id) as total_articles,\n        sum(quantity) as total_quantity,\n        sum(inventory_value) as total_inventory_value,\n        sum(potential_revenue) as total_potential_revenue,\n        \n        -- Stock level counts\n        count(case when stock_level = 'Out of Stock' then 1 end) as out_of_stock_count,\n        count(case when stock_level = 'Low Stock' then 1 end) as low_stock_count,\n        count(case when stock_level = 'Medium Stock' then 1 end) as medium_stock_count,\n        count(case when stock_level = 'High Stock' then 1 end) as high_stock_count,\n        \n        -- Risk level counts\n        count(case when stockout_risk = 'Stockout' then 1 end) as stockout_count,\n        count(case when stockout_risk = 'Critical' then 1 end) as critical_risk_count,\n        count(case when stockout_risk = 'Warning' then 1 end) as warning_risk_count,\n        count(case when stockout_risk = 'Normal' then 1 end) as normal_risk_count,\n        \n        -- Inventory health metrics\n        sum(case when is_excess_inventory then inventory_value else 0 end) as excess_inventory_value,\n        sum(case when is_slow_moving then inventory_value else 0 end) as slow_moving_value,\n        sum(case when needs_reorder then 1 else 0 end) as reorder_needed_count,\n        sum(recommended_reorder_quantity) as total_recommended_reorder_quantity,\n        \n        -- ABC analysis counts\n        count(case when abc_class = 'A' then 1 end) as class_a_count,\n        count(case when abc_class = 'B' then 1 end) as class_b_count,\n        count(case when abc_class = 'C' then 1 end) as class_c_count,\n        count(case when abc_class = 'D' then 1 end) as class_d_count,\n        \n        -- Calculate percentages\n        (count(case when stock_level = 'Out of Stock' then 1 end) * 100.0 / \n            nullif(count(distinct article_id), 0)) as out_of_stock_percent,\n        (count(case when stock_level = 'Low Stock' then 1 end) * 100.0 / \n            nullif(count(distinct article_id), 0)) as low_stock_percent,\n        (sum(case when is_excess_inventory then inventory_value else 0 end) * 100.0 / \n            nullif(sum(inventory_value), 0)) as excess_inventory_percent,\n        (sum(case when is_slow_moving then inventory_value else 0 end) * 100.0 / \n            nullif(sum(inventory_value), 0)) as slow_moving_percent\n    from inventory_status\n    group by warehouse_id\n),\n\n-- Aggregate metrics by category\ncategory_metrics as (\n    select\n        warehouse_id,\n        category,\n        count(distinct article_id) as total_articles,\n        sum(quantity) as total_quantity,\n        sum(inventory_value) as total_inventory_value,\n        sum(potential_revenue) as total_potential_revenue,\n        \n        -- Stock level counts\n        count(case when stock_level = 'Out of Stock' then 1 end) as out_of_stock_count,\n        count(case when stock_level = 'Low Stock' then 1 end) as low_stock_count,\n        \n        -- Risk level counts\n        count(case when stockout_risk = 'Stockout' or stockout_risk = 'Critical' then 1 end) as high_risk_count,\n        \n        -- Inventory health metrics\n        sum(case when is_excess_inventory then inventory_value else 0 end) as excess_inventory_value,\n        sum(case when is_slow_moving then inventory_value else 0 end) as slow_moving_value,\n        \n        -- ABC analysis counts\n        count(case when abc_class = 'A' then 1 end) as class_a_count,\n        count(case when abc_class = 'B' then 1 end) as class_b_count,\n        count(case when abc_class = 'C' then 1 end) as class_c_count,\n        count(case when abc_class = 'D' then 1 end) as class_d_count\n    from inventory_status\n    group by warehouse_id, category\n),\n\n-- Combine all metrics\nstock_levels as (\n    select\n        'warehouse' as level_type,\n        warehouse_id,\n        null as category,\n        total_articles,\n        total_quantity,\n        total_inventory_value,\n        total_potential_revenue,\n        out_of_stock_count,\n        low_stock_count,\n        medium_stock_count,\n        high_stock_count,\n        stockout_count,\n        critical_risk_count,\n        warning_risk_count,\n        normal_risk_count,\n        excess_inventory_value,\n        slow_moving_value,\n        reorder_needed_count,\n        total_recommended_reorder_quantity,\n        class_a_count,\n        class_b_count,\n        class_c_count,\n        class_d_count,\n        out_of_stock_percent,\n        low_stock_percent,\n        excess_inventory_percent,\n        slow_moving_percent,\n        current_timestamp() as generated_at\n    from warehouse_metrics\n    \n    union all\n    \n    select\n        'category' as level_type,\n        warehouse_id,\n        category,\n        total_articles,\n        total_quantity,\n        total_inventory_value,\n        total_potential_revenue,\n        out_of_stock_count,\n        low_stock_count,\n        null as medium_stock_count,\n        null as high_stock_count,\n        null as stockout_count,\n        null as critical_risk_count,\n        null as warning_risk_count,\n        null as normal_risk_count,\n        excess_inventory_value,\n        slow_moving_value,\n        null as reorder_needed_count,\n        null as total_recommended_reorder_quantity,\n        class_a_count,\n        class_b_count,\n        class_c_count,\n        class_d_count,\n        (out_of_stock_count * 100.0 / nullif(total_articles, 0)) as out_of_stock_percent,\n        (low_stock_count * 100.0 / nullif(total_articles, 0)) as low_stock_percent,\n        (excess_inventory_value * 100.0 / nullif(total_inventory_value, 0)) as excess_inventory_percent,\n        (slow_moving_value * 100.0 / nullif(total_inventory_value, 0)) as slow_moving_percent,\n        current_timestamp() as generated_at\n    from category_metrics\n)\n\nselect * from stock_levels", "relation_name": "\"dbt_mercurios_dev\".\"main_marts_inventory\".\"stock_levels\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.797856Z", "completed_at": "2025-03-11T12:05:01.803189Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.803417Z", "completed_at": "2025-03-11T12:05:01.803420Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0064487457275390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.reorder_recommendations", "compiled": true, "compiled_code": "\n\nwith inventory_status as (\n    select * from \"dbt_mercurios_dev\".\"main_marts_inventory\".\"inventory_status\"\n),\n\n-- Get historical sales velocity\nsales_velocity as (\n    select\n        s.article_id,\n        -- Calculate average daily sales for different time periods\n        sum(s.quantity) / 30.0 as daily_sales_30d,\n        sum(s.quantity) / 90.0 as daily_sales_90d,\n        -- Calculate standard deviation of daily sales for safety stock\n        stddev(daily_qty) as daily_sales_stddev\n    from (\n        select\n            article_id,\n            sale_date,\n            sum(quantity) as daily_qty\n        from \"dbt_mercurios_dev\".\"main_staging\".\"stg_prohandel__sales\"\n        where sale_date >= dateadd('day', -90, current_date())\n        group by article_id, sale_date\n    ) s\n    group by s.article_id\n),\n\n-- Calculate reorder points and quantities\nreorder_calc as (\n    select\n        i.inventory_id,\n        i.article_id,\n        i.warehouse_id,\n        i.article_number,\n        i.description,\n        i.category,\n        i.subcategory,\n        i.brand,\n        i.supplier,\n        i.quantity as current_quantity,\n        i.stock_level,\n        i.stockout_risk,\n        i.purchase_price,\n        i.retail_price,\n        i.inventory_value,\n        i.abc_class,\n        i.tenant_id,\n        \n        -- Sales metrics\n        i.quantity_sold_30d,\n        i.quantity_sold_90d,\n        coalesce(sv.daily_sales_30d, 0) as daily_sales_30d,\n        coalesce(sv.daily_sales_90d, 0) as daily_sales_90d,\n        coalesce(sv.daily_sales_stddev, 0) as daily_sales_stddev,\n        \n        -- Use lead_time_days from article if available\n        coalesce(i.lead_time_days, \n            case\n                when i.abc_class = 'A' then 7  -- Priority items get faster shipping\n                when i.abc_class = 'B' then 10\n                when i.abc_class = 'C' then 14\n                else 14\n            end\n        ) as lead_time_days,\n        \n        -- Service level factor (z-score) based on ABC classification\n        case\n            when i.abc_class = 'A' then 2.33  -- 99% service level\n            when i.abc_class = 'B' then 1.65  -- 95% service level\n            when i.abc_class = 'C' then 1.28  -- 90% service level\n            else 1.28\n        end as service_level_factor,\n        \n        -- Calculate reorder point components\n        coalesce(sv.daily_sales_90d, 0) * \n            coalesce(i.lead_time_days, \n                case\n                    when i.abc_class = 'A' then 7\n                    when i.abc_class = 'B' then 10\n                    when i.abc_class = 'C' then 14\n                    else 14\n                end\n            ) as lead_time_demand,\n            \n        coalesce(sv.daily_sales_stddev, 0) * \n            case\n                when i.abc_class = 'A' then 2.33\n                when i.abc_class = 'B' then 1.65\n                when i.abc_class = 'C' then 1.28\n                else 1.28\n            end * sqrt(\n                coalesce(i.lead_time_days, \n                    case\n                        when i.abc_class = 'A' then 7\n                        when i.abc_class = 'B' then 10\n                        when i.abc_class = 'C' then 14\n                        else 14\n                    end\n                )\n            ) as safety_stock,\n        \n        -- Economic Order Quantity (EOQ) calculation\n        -- Assuming ordering cost of $20 per order and holding cost of 25% of item value per year\n        case\n            when coalesce(sv.daily_sales_90d, 0) > 0 and i.purchase_price > 0 then\n                sqrt(\n                    (2 * 20 * coalesce(sv.daily_sales_90d, 0) * 365) / \n                    (0.25 * i.purchase_price)\n                )\n            else null\n        end as economic_order_quantity\n        \n    from inventory_status i\n    left join sales_velocity sv on i.article_id = sv.article_id\n),\n\n-- Generate final recommendations\nreorder_recommendations as (\n    select\n        inventory_id,\n        article_id,\n        warehouse_id,\n        article_number,\n        description,\n        category,\n        subcategory,\n        brand,\n        supplier,\n        current_quantity,\n        stock_level,\n        stockout_risk,\n        purchase_price,\n        retail_price,\n        inventory_value,\n        abc_class,\n        tenant_id,\n        \n        -- Sales metrics\n        quantity_sold_30d,\n        quantity_sold_90d,\n        daily_sales_30d,\n        daily_sales_90d,\n        \n        -- Reorder calculations\n        lead_time_days,\n        round(lead_time_demand, 2) as lead_time_demand,\n        round(safety_stock, 2) as safety_stock,\n        \n        -- Calculate reorder point\n        round(lead_time_demand + safety_stock, 0) as reorder_point,\n        \n        -- Calculate if reorder is needed\n        case\n            when current_quantity <= (lead_time_demand + safety_stock) then true\n            else false\n        end as needs_reorder,\n        \n        -- Calculate reorder quantity\n        case\n            when current_quantity <= (lead_time_demand + safety_stock) then\n                case\n                    -- Use EOQ if available and reasonable\n                    when economic_order_quantity is not null and \n                         economic_order_quantity >= (lead_time_demand + safety_stock - current_quantity) then\n                        ceil(greatest(economic_order_quantity, 1))\n                    -- Otherwise use lead time demand plus safety stock minus current quantity\n                    else\n                        ceil(greatest(lead_time_demand + safety_stock - current_quantity, 1))\n                end\n            else 0\n        end as recommended_order_quantity,\n        \n        -- Calculate order cost\n        case\n            when current_quantity <= (lead_time_demand + safety_stock) then\n                case\n                    when economic_order_quantity is not null and \n                         economic_order_quantity >= (lead_time_demand + safety_stock - current_quantity) then\n                        ceil(greatest(economic_order_quantity, 1)) * purchase_price\n                    else\n                        ceil(greatest(lead_time_demand + safety_stock - current_quantity, 1)) * purchase_price\n                end\n            else 0\n        end as order_cost,\n        \n        -- Calculate days until stockout\n        case\n            when daily_sales_90d > 0 then\n                round(current_quantity / daily_sales_90d, 0)\n            else\n                999  -- Arbitrary large number for items with no sales\n        end as days_until_stockout,\n        \n        -- Calculate priority\n        case\n            when current_quantity <= 0 then 1  -- Already out of stock\n            when current_quantity <= safety_stock then 2  -- Below safety stock\n            when current_quantity <= (lead_time_demand + safety_stock) then 3  -- Below reorder point\n            else 4  -- Above reorder point\n        end as priority,\n        \n        -- Calculate priority label\n        case\n            when current_quantity <= 0 then 'Critical - Out of Stock'\n            when current_quantity <= safety_stock then 'High - Below Safety Stock'\n            when current_quantity <= (lead_time_demand + safety_stock) then 'Medium - Below Reorder Point'\n            else 'Low - Stock Adequate'\n        end as priority_label,\n        \n        -- Add timestamp\n        current_timestamp() as generated_at\n        \n    from reorder_calc\n)\n\nselect * from reorder_recommendations\norder by priority, abc_class, order_cost desc", "relation_name": "\"dbt_mercurios_dev\".\"main_marts_inventory\".\"reorder_recommendations\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-03-11T12:05:01.804585Z", "completed_at": "2025-03-11T12:05:01.808604Z"}, {"name": "execute", "started_at": "2025-03-11T12:05:01.808786Z", "completed_at": "2025-03-11T12:05:01.808790Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0046923160552978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.mercurios.tenant_inventory_dashboard", "compiled": true, "compiled_code": "\n\nwith inventory_status as (\n    select \n        *,\n        -- Extract tenant_id from the data based on your multi-tenant architecture\n        -- This assumes tenant_id is stored in the inventory records\n        -- If not available directly, it could be joined from another table\n        tenant_id\n    from \"dbt_mercurios_dev\".\"main_marts_inventory\".\"inventory_status\"\n),\n\nreorder_recommendations as (\n    select * from \"dbt_mercurios_dev\".\"main_marts_inventory\".\"reorder_recommendations\"\n),\n\n-- Aggregate metrics by tenant and warehouse\ntenant_warehouse_metrics as (\n    select\n        tenant_id,\n        warehouse_id,\n        count(distinct article_id) as total_articles,\n        sum(quantity) as total_quantity,\n        sum(inventory_value) as total_inventory_value,\n        sum(potential_revenue) as total_potential_revenue,\n        \n        -- Stock level counts\n        count(case when stock_level = 'Out of Stock' then 1 end) as out_of_stock_count,\n        count(case when stock_level = 'Low Stock' then 1 end) as low_stock_count,\n        count(case when stock_level = 'Medium Stock' then 1 end) as medium_stock_count,\n        count(case when stock_level = 'High Stock' then 1 end) as high_stock_count,\n        \n        -- Risk level counts\n        count(case when stockout_risk = 'Stockout' then 1 end) as stockout_count,\n        count(case when stockout_risk = 'Critical' then 1 end) as critical_risk_count,\n        count(case when stockout_risk = 'Warning' then 1 end) as warning_risk_count,\n        count(case when stockout_risk = 'Normal' then 1 end) as normal_risk_count,\n        \n        -- Inventory health metrics\n        sum(case when is_excess_inventory then inventory_value else 0 end) as excess_inventory_value,\n        sum(case when is_slow_moving then inventory_value else 0 end) as slow_moving_value,\n        \n        -- Reorder metrics\n        sum(case when r.needs_reorder then 1 else 0 end) as reorder_needed_count,\n        sum(r.recommended_order_quantity) as total_recommended_order_quantity,\n        sum(r.order_cost) as total_order_cost,\n        \n        -- ABC analysis counts\n        count(case when abc_class = 'A' then 1 end) as class_a_count,\n        count(case when abc_class = 'B' then 1 end) as class_b_count,\n        count(case when abc_class = 'C' then 1 end) as class_c_count,\n        count(case when abc_class = 'D' then 1 end) as class_d_count,\n        \n        -- Calculate percentages\n        (count(case when stock_level = 'Out of Stock' then 1 end) * 100.0 / \n            nullif(count(distinct article_id), 0)) as out_of_stock_percent,\n        (count(case when stock_level = 'Low Stock' then 1 end) * 100.0 / \n            nullif(count(distinct article_id), 0)) as low_stock_percent,\n        (sum(case when is_excess_inventory then inventory_value else 0 end) * 100.0 / \n            nullif(sum(inventory_value), 0)) as excess_inventory_percent,\n        (sum(case when is_slow_moving then inventory_value else 0 end) * 100.0 / \n            nullif(sum(inventory_value), 0)) as slow_moving_percent\n    from inventory_status i\n    left join reorder_recommendations r on i.inventory_id = r.inventory_id\n    group by tenant_id, warehouse_id\n),\n\n-- Aggregate metrics by tenant, warehouse, and category\ntenant_category_metrics as (\n    select\n        tenant_id,\n        warehouse_id,\n        category,\n        count(distinct article_id) as total_articles,\n        sum(quantity) as total_quantity,\n        sum(inventory_value) as total_inventory_value,\n        sum(potential_revenue) as total_potential_revenue,\n        \n        -- Stock level counts\n        count(case when stock_level = 'Out of Stock' then 1 end) as out_of_stock_count,\n        count(case when stock_level = 'Low Stock' then 1 end) as low_stock_count,\n        \n        -- Risk level counts\n        count(case when stockout_risk = 'Stockout' or stockout_risk = 'Critical' then 1 end) as high_risk_count,\n        \n        -- Inventory health metrics\n        sum(case when is_excess_inventory then inventory_value else 0 end) as excess_inventory_value,\n        sum(case when is_slow_moving then inventory_value else 0 end) as slow_moving_value,\n        \n        -- Reorder metrics\n        sum(case when r.needs_reorder then 1 else 0 end) as reorder_needed_count,\n        sum(r.recommended_order_quantity) as total_recommended_order_quantity,\n        sum(r.order_cost) as total_order_cost,\n        \n        -- ABC analysis counts\n        count(case when abc_class = 'A' then 1 end) as class_a_count,\n        count(case when abc_class = 'B' then 1 end) as class_b_count,\n        count(case when abc_class = 'C' then 1 end) as class_c_count,\n        count(case when abc_class = 'D' then 1 end) as class_d_count\n    from inventory_status i\n    left join reorder_recommendations r on i.inventory_id = r.inventory_id\n    group by tenant_id, warehouse_id, category\n),\n\n-- Combine all metrics with tenant isolation\ntenant_inventory_dashboard as (\n    select\n        'warehouse' as level_type,\n        tenant_id,\n        warehouse_id,\n        null as category,\n        total_articles,\n        total_quantity,\n        total_inventory_value,\n        total_potential_revenue,\n        out_of_stock_count,\n        low_stock_count,\n        medium_stock_count,\n        high_stock_count,\n        stockout_count,\n        critical_risk_count,\n        warning_risk_count,\n        normal_risk_count,\n        excess_inventory_value,\n        slow_moving_value,\n        reorder_needed_count,\n        total_recommended_order_quantity,\n        total_order_cost,\n        class_a_count,\n        class_b_count,\n        class_c_count,\n        class_d_count,\n        out_of_stock_percent,\n        low_stock_percent,\n        excess_inventory_percent,\n        slow_moving_percent,\n        current_timestamp() as generated_at\n    from tenant_warehouse_metrics\n    \n    union all\n    \n    select\n        'category' as level_type,\n        tenant_id,\n        warehouse_id,\n        category,\n        total_articles,\n        total_quantity,\n        total_inventory_value,\n        total_potential_revenue,\n        out_of_stock_count,\n        low_stock_count,\n        null as medium_stock_count,\n        null as high_stock_count,\n        null as stockout_count,\n        null as critical_risk_count,\n        null as warning_risk_count,\n        null as normal_risk_count,\n        excess_inventory_value,\n        slow_moving_value,\n        reorder_needed_count,\n        total_recommended_order_quantity,\n        total_order_cost,\n        class_a_count,\n        class_b_count,\n        class_c_count,\n        class_d_count,\n        (out_of_stock_count * 100.0 / nullif(total_articles, 0)) as out_of_stock_percent,\n        (low_stock_count * 100.0 / nullif(total_articles, 0)) as low_stock_percent,\n        (excess_inventory_value * 100.0 / nullif(total_inventory_value, 0)) as excess_inventory_percent,\n        (slow_moving_value * 100.0 / nullif(total_inventory_value, 0)) as slow_moving_percent,\n        current_timestamp() as generated_at\n    from tenant_category_metrics\n)\n\nselect * from tenant_inventory_dashboard", "relation_name": "\"dbt_mercurios_dev\".\"main_marts_inventory\".\"tenant_inventory_dashboard\"", "batch_results": null}], "elapsed_time": 0.21204185485839844, "args": {"print": true, "strict_mode": false, "use_colors": true, "require_nested_cumulative_type_params": false, "static": false, "exclude": [], "partial_parse": true, "static_parser": true, "require_batched_execution_for_custom_microbatch_strategy": false, "printer_width": 80, "log_format": "default", "select": [], "log_path": "/Users/juliusrechenbach/API ProHandelTest/dbt_mercurios/logs", "compile": true, "source_freshness_run_project_hooks": false, "send_anonymous_usage_stats": true, "favor_state": false, "state_modified_compare_more_unrendered_values": false, "quiet": false, "vars": {}, "warn_error_options": {"include": [], "exclude": []}, "defer": false, "skip_nodes_if_on_run_start_fails": false, "log_format_file": "debug", "log_level": "info", "populate_cache": true, "version_check": true, "project_dir": "/Users/juliusrechenbach/API ProHandelTest/dbt_mercurios", "macro_debugging": false, "show_resource_report": false, "which": "generate", "require_resource_names_without_spaces": false, "cache_selected_only": false, "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "state_modified_compare_vars": false, "use_colors_file": true, "require_yaml_configuration_for_mf_time_spines": false, "log_file_max_bytes": 10485760, "profiles_dir": "/Users/juliusrechenbach/API ProHandelTest/dbt_mercurios", "invocation_command": "dbt docs generate", "partial_parse_file_diff": true, "indirect_selection": "eager", "empty_catalog": false, "log_level_file": "debug", "introspect": true}}